/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create } from '../fn/tenant-http/create';
import { Create$Params } from '../fn/tenant-http/create';
import { list } from '../fn/tenant-http/list';
import { List$Params } from '../fn/tenant-http/list';
import { read } from '../fn/tenant-http/read';
import { Read$Params } from '../fn/tenant-http/read';
import { Tenant } from '../models/tenant';
import { update } from '../fn/tenant-http/update';
import { Update$Params } from '../fn/tenant-http/update';

@Injectable({ providedIn: 'root' })
export class TenantHttpService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `tenantControllerList()` */
  static readonly TenantControllerListPath = '/tenants';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `list()` instead.
   *
   * This method doesn't expect any request body.
   */
  list$Response(params?: List$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Tenant>>> {
    return list(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `list$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  list(params?: List$Params, context?: HttpContext): Observable<Array<Tenant>> {
    return this.list$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Tenant>>): Array<Tenant> => r.body)
    );
  }

  /** Path part for operation `tenantControllerCreate()` */
  static readonly TenantControllerCreatePath = '/tenants';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<Tenant>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<Tenant> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tenant>): Tenant => r.body)
    );
  }

  /** Path part for operation `tenantControllerRead()` */
  static readonly TenantControllerReadPath = '/tenants/{tenantId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `read()` instead.
   *
   * This method doesn't expect any request body.
   */
  read$Response(params: Read$Params, context?: HttpContext): Observable<StrictHttpResponse<Tenant>> {
    return read(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `read$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  read(params: Read$Params, context?: HttpContext): Observable<Tenant> {
    return this.read$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tenant>): Tenant => r.body)
    );
  }

  /** Path part for operation `tenantControllerUpdate()` */
  static readonly TenantControllerUpdatePath = '/tenants/{tenantId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<void> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create } from '../fn/task-http/create';
import { Create$Params } from '../fn/task-http/create';
import { delete$ } from '../fn/task-http/delete';
import { Delete$Params } from '../fn/task-http/delete';
import { list } from '../fn/task-http/list';
import { List$Params } from '../fn/task-http/list';
import { read } from '../fn/task-http/read';
import { Read$Params } from '../fn/task-http/read';
import { Task } from '../models/task';
import { update } from '../fn/task-http/update';
import { Update$Params } from '../fn/task-http/update';
import { upsert } from '../fn/task-http/upsert';
import { Upsert$Params } from '../fn/task-http/upsert';

@Injectable({ providedIn: 'root' })
export class TaskHttpService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `taskControllerList()` */
  static readonly TaskControllerListPath = '/tenants/{tenantId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `list()` instead.
   *
   * This method doesn't expect any request body.
   */
  list$Response(params: List$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'items': Array<Task>;
'count': number;
}>> {
    return list(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `list$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  list(params: List$Params, context?: HttpContext): Observable<{
'items': Array<Task>;
'count': number;
}> {
    return this.list$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'items': Array<Task>;
'count': number;
}>): {
'items': Array<Task>;
'count': number;
} => r.body)
    );
  }

  /** Path part for operation `taskControllerCreate()` */
  static readonly TaskControllerCreatePath = '/tenants/{tenantId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<Task> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `taskControllerRead()` */
  static readonly TaskControllerReadPath = '/tenants/{tenantId}/tasks/{uuid}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `read()` instead.
   *
   * This method doesn't expect any request body.
   */
  read$Response(params: Read$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return read(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `read$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  read(params: Read$Params, context?: HttpContext): Observable<Task> {
    return this.read$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `taskControllerUpsert()` */
  static readonly TaskControllerUpsertPath = '/tenants/{tenantId}/tasks/{uuid}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `upsert()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  upsert$Response(params: Upsert$Params, context?: HttpContext): Observable<StrictHttpResponse<(Task | void)>> {
    return upsert(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `upsert$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  upsert(params: Upsert$Params, context?: HttpContext): Observable<(Task | void)> {
    return this.upsert$Response(params, context).pipe(
      map((r: StrictHttpResponse<(Task | void)>): (Task | void) => r.body)
    );
  }

  /** Path part for operation `taskControllerDelete()` */
  static readonly TaskControllerDeletePath = '/tenants/{tenantId}/tasks/{uuid}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `taskControllerUpdate()` */
  static readonly TaskControllerUpdatePath = '/tenants/{tenantId}/tasks/{uuid}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<void> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
